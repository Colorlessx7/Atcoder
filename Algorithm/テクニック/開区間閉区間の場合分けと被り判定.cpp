//○---○ ○---● ●---○ ●---●　のように表される開区間、半開区間、閉区間の共通部分(被り)があるかの判定

//まず閉区間の被りがあるかないかの判定を考えると
//○---○ と ○---○    と ○---○         の3パターンがある
// ○-○   　  ○---○           ○---○
//左二つの被りがあるかについてはmax(li,lj)<=min(ri,rj)を判定すれば被りがあるかわかる
//右はri<lj or rj<liで判定でき、こっちの方が簡単なので閉区間の被り判定は被ってないかどうかで決める

//開区間、半開区間、閉区間それぞれで場合分けすることもできるが、
//単純に全要素を2倍して開区間部分を1内側にずらせば全てを閉区間として扱うことができる。

//ABC207Cより　開区間、半開区間、閉区間で共通部分がある(i,j)(ペア被りなし)の個数を出力
#include<bits/stdc++.h>
#include<atcoder/all>
using namespace atcoder;
using namespace std;
#define rep(i,N) for(int i = 0; i < N; i++)
typedef long long ll;
int main(){
    int n;
    cin >> n;
    vector<ll> l(n),r(n);
    rep(i,n){
        int t;
        cin >> t >> l[i] >> r[i];
        //閉区間と開区間の4パターンを全て閉区間として考えたい
        //全てを2倍して、開区間の部分を1ずらすと全て閉区間として扱える
        l[i] *= 2;
        r[i] *= 2;
        //左端が開区間なら+1方向にずらす
        if(t >= 3){
            l[i]++;
        }
        //右端が開区間なら-1方向にずらす
        if(t % 2 == 0){
            r[i]--;
        }
    }
    int ans = 0;
    //同じペアを2回やらないように
    //rep(i,n)rep(j,i)でjは常にi未満を試すため重複なくできる
    rep(i,n){
        rep(j,i){
            //閉区間同士が被ってないか判定
            if(r[i] < l[j]){
                continue;
            }
            if(r[j] < l[i]){
                continue;
            }
            //被っている場合+
            ++ans;
        }
    }
    cout << ans << endl;
    return 0;
}
