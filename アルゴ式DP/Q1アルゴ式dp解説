Q1 一次元配列dp
  1-1
  問題傾向 フィボナッチ数列的な計算のメモ化
  テーブル dp[i]:i番目の値
  サイズ dp(n)
  初期値 dp[0] = x dp[1] = y それ以外0
  漸化式 dp[i] = (dp[i-1] + dp[i-2]) % 100
  最終出力 dp[n-1]
  
  1-2
  問題傾向 最速計算
  テーブル dp[i]:iマス目に辿り着く最速の速度
  サイズ dp(n)
  初期値 dp[0] = 0
  漸化式 dp[i] += dp[i-1] + a[i] (i=1)
        dp[i] = min(dp[i],dp[i-2] + 2*a[i]) (それ以外)
  最終出力 dp[n-1]
  
  1-3
  問題傾向 フィボナッチ数列のパターンの数え上げ
  テーブル dp[i]:i段目に辿り着くパターン数
  サイズ dp(n+1)
  初期値 dp[0] = 1
  漸化式 dp[i] += dp[i-1] (i=1)
        dp[i] += dp[i-1] + dp[i-2] (それ以外)
  最終出力 dp[n]
  
  1-4 
  問題傾向 トリボナッチ数列のパターンの数え上げ
  テーブル dp[i]:i番目までに3種類のタイルで埋める時のパターン数
  サイズ dp(n+1)
  初期値 dp[0] = 1　dp[1] = 2 dp[2] = 4
  漸化式 dp[i] += dp[i-1] + dp[i-2] + dp[i-3] (初期値以降)
  最終出力 dp[n]
  
  1-5
  問題傾向 Q1-2の拡張 最速計算
  テーブル dp[i]:iマス目に辿り着く最速の速度
  サイズ dp(n)
  初期値 dp[0] = 0 それ以外INF
  漸化式 dp[i] = min(dp[i],dp[i-j] + j * a[i]) 
  (配列外参照を起こさない問題の範囲(1~m)でminをとり続ける)
  最終出力 dp[n-1]
  
  1-6
  問題傾向 到着可能性判定
  テーブル dp[i][j]:i番目までのサイコロの出目でjマス目に到達できるか
  サイズ dp(m+1,vector<bool>(n+1))
  初期値 dp[0][0] = 1 それ以外0
  漸化式 dp[i+1][j] = 1　(dp[i][j]がTrueなら)
        dp[i+1][j+k*d[i]] = 1 (nマス目までのサイコロの出目d[i]で行ける範囲全てTrueに) (1<=k<n/d[i])
  最終出力 dp[m][n]の1,0でYes,No
