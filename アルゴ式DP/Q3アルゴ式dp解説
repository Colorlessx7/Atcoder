Q3 部分和問題とナップザック問題
  3-1
  問題傾向 部分和問題 移動先のパターン数の数え上げ 
  テーブル dp[i][j]:マス(i,j)にコマが存在しうるかどうか
  サイズ dp(n,vector<bool>(m))
  初期値 dp[0][0] = 1
  漸化式 dp[i+1][j] = 1 (dp[i][j]=True)
        dp[i+1][j+a[i]] = 1 (a[i]が存在すること,移動先が範囲内にあることが条件)(i <= n-2 && j + a[i] < m)
  最終出力 dp[n-1][j](0<=j<=m)のTrueの数
  
  3-2
  問題傾向 部分和問題 移動先のパターン数の数え上げ 
  テーブル dp[i][j]:i番目のボールまでを使って重さjにできるかどうか
  サイズ dp(n+1,vector<bool>(m+1))
  初期値 dp[0][0] = 1
  漸化式 dp[i+1][j] = 1 (dp[i][j]=True)
        dp[i+1][j+w[i]] = 1 (j + w[i] <= m)
  最終出力 dp[n][m]の1,0でYes,No
  
  3-3
  問題傾向 ナップザック問題 特定位置到着可能性問題 数値最大化
  テーブル dp[i][j]:マス(i,j)にコマが到達するまでの最大スコア(到達不能の場合は−1)
  サイズ dp(n+1,vector<int>(m))
  初期値 dp[0][0] = 0 それ以外-1
  漸化式 dp[i+1][j] = max(dp[i][j],dp[i+1][j]) (dp[i][j]!=0)
        dp[i+1][j+a[i]] = max(dp[i+1][j+a[i]],dp[i][j]+b[i]) (j+a[i]<m) (aは移動量の配列 bはスコアの配列)
  最終出力 dp[n-1][m-1]
  
  3-4
  問題傾向 ナップザック問題 特定位置到着可能性問題 数値最大化
  テーブル dp[i][j]:i番目までのボールを使って重さの合計がjになった時の価値の最大値(到達不能の場合は−1)
  サイズ dp(n+1,vector<int>(m+1))
  初期値 全て0
  漸化式 dp[i+1][j] = max(dp[i][j-w[i]]+v[i],dp[i][j]) (j >= w[i])
        dp[i+1][j] = dp[i][j] (j < w[i])
  最終出力 dp[n][m]
  
  3-5
  問題傾向 ナップザック問題 特定位置到着可能性問題 数値最大化
  テーブル dp[i][j]:i番目までのボールを使って重さの合計がjになった時の価値の最大値(到達不能の場合は−1)
  サイズ dp(n+1,vector<int>(m+1))
  初期値 全て0
  漸化式 dp[i+1][j] = max(dp[i][j-w[i]]+v[i],dp[i][j]) (j >= w[i])
        dp[i+1][j] = dp[i][j] (j < w[i])
  最終出力 dp[n][m]
